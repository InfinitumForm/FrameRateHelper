{"version":3,"file":"FrameRateHelper.js","sources":["../src/FrameRateHelper.class.js"],"sourcesContent":["/*!\r\n * FrameRateHelper.js v1.0.1\r\n * Author: Ivijan-Stefan StipiÄ‡\r\n * MIT Licensed | https://github.com/InfinitumForm/FrameRateHelper\r\n */\r\nclass FrameRateHelper {\r\n\tconstructor() {\r\n\t\tthis.estimatedFrameDuration = 1000 / 60; // Default assumption: 60Hz = 16.67ms\r\n\t\tthis.ready = false;\r\n\t\tthis._callbacks = [];\r\n\r\n\t\tthis._init();\r\n\t}\r\n\r\n\t/**\r\n\t * Starts the detection of the refresh rate using the best available method.\r\n\t */\r\n\t_init() {\r\n\t\t// Try requestAnimationFrame if available\r\n\t\tif (typeof window.requestAnimationFrame === 'function') {\r\n\t\t\tthis._measureWithRAF();\r\n\t\t} else if (typeof window.requestIdleCallback === 'function') {\r\n\t\t\tthis._measureWithIdleCallback();\r\n\t\t} else {\r\n\t\t\tthis._measureWithTimeout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures refresh rate using requestAnimationFrame.\r\n\t * Most accurate under normal conditions.\r\n\t */\r\n\t_measureWithRAF() {\r\n\t\tconst frameTimes = [];\r\n\t\tlet lastTime = performance.now();\r\n\r\n\t\tconst check = (timestamp) => {\r\n\t\t\tconst delta = timestamp - lastTime;\r\n\t\t\tframeTimes.push(delta);\r\n\r\n\t\t\tif (frameTimes.length > 60) {\r\n\t\t\t\tthis._finalize(frameTimes);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlastTime = timestamp;\r\n\t\t\trequestAnimationFrame(check);\r\n\t\t};\r\n\r\n\t\trequestAnimationFrame(check);\r\n\t}\r\n\r\n\t/**\r\n\t * Fallback: measure refresh rate with requestIdleCallback.\r\n\t * Useful in inactive tabs or low-power devices.\r\n\t */\r\n\t_measureWithIdleCallback() {\r\n\t\tconst samples = [];\r\n\t\tlet count = 0;\r\n\r\n\t\tconst collect = (deadline) => {\r\n\t\t\tconst now = performance.now();\r\n\t\t\tsamples.push(now);\r\n\t\t\tcount++;\r\n\r\n\t\t\tif (count > 60) {\r\n\t\t\t\tconst deltas = samples.slice(1).map((t, i) => t - samples[i]);\r\n\t\t\t\tthis._finalize(deltas);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestIdleCallback(collect);\r\n\t\t};\r\n\r\n\t\trequestIdleCallback(collect);\r\n\t}\r\n\r\n\t/**\r\n\t * Fallback: use setTimeout to estimate frame intervals.\r\n\t * Least accurate but ensures basic support.\r\n\t */\r\n\t_measureWithTimeout() {\r\n\t\tconst frameTimes = [];\r\n\t\tlet lastTime = performance.now();\r\n\r\n\t\tconst check = () => {\r\n\t\t\tconst now = performance.now();\r\n\t\t\tconst delta = now - lastTime;\r\n\t\t\tframeTimes.push(delta);\r\n\r\n\t\t\tif (frameTimes.length > 60) {\r\n\t\t\t\tthis._finalize(frameTimes);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlastTime = now;\r\n\t\t\tsetTimeout(check, 16);\r\n\t\t};\r\n\r\n\t\tsetTimeout(check, 16);\r\n\t}\r\n\r\n\t/**\r\n\t * Finalizes frame duration calculation with clamping to ensure stability.\r\n\t *\r\n\t * @param {number[]} frameTimes - Array of frame intervals in milliseconds\r\n\t */\r\n\t_finalize(frameTimes) {\r\n\t\tconst avg = frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length;\r\n\r\n\t\t// Clamp average to safe range: between 10ms (100Hz) and 20ms (50Hz)\r\n\t\tconst clamped = Math.min(Math.max(avg, 10), 20);\r\n\t\tthis.estimatedFrameDuration = clamped;\r\n\r\n\t\tthis.ready = true;\r\n\t\tconst refreshRate = 1000 / clamped;\r\n\r\n\t\t// Execute all queued callbacks\r\n\t\tthis._callbacks.forEach(cb => cb(refreshRate));\r\n\t\tthis._callbacks = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the estimated frame duration with optional offset.\r\n\t *\r\n\t * @param {number} offset - Optional offset in milliseconds.\r\n\t * @returns {number} Frame duration in milliseconds.\r\n\t */\r\n\tgetDuration(offset = 0) {\r\n\t\treturn this.estimatedFrameDuration + offset;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Calculates total duration based on the number of animation frames.\r\n\t *\r\n\t * @param {number} frames - Number of animation frames to simulate.\r\n\t * @param {object} [options] - Optional configuration.\r\n\t * @param {number} [options.min] - Minimum clamped duration (in ms).\r\n\t * @param {number} [options.max] - Maximum clamped duration (in ms).\r\n\t * @param {boolean} [options.rounded=false] - Whether to round the result to the nearest integer.\r\n\t * @returns {number} Duration in milliseconds (clamped and optionally rounded).\r\n\t */\r\n\tgetDurationForFrames(frames, options = {}) {\r\n\t\tlet duration = frames * this.estimatedFrameDuration;\r\n\r\n\t\t// Apply clamping if provided\r\n\t\tif (typeof options.min === 'number' && duration < options.min) {\r\n\t\t\tduration = options.min;\r\n\t\t}\r\n\t\tif (typeof options.max === 'number' && duration > options.max) {\r\n\t\t\tduration = options.max;\r\n\t\t}\r\n\r\n\t\t// Round the result if requested\r\n\t\tif (options.rounded === true) {\r\n\t\t\tduration = Math.round(duration);\r\n\t\t}\r\n\r\n\t\treturn duration;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Registers a callback to be executed when frame duration is ready.\r\n\t *\r\n\t * @param {function} callback - Receives the refresh rate (Hz).\r\n\t */\r\n\tonReady(callback) {\r\n\t\tif (this.ready) {\r\n\t\t\tcallback(1000 / this.estimatedFrameDuration);\r\n\t\t} else {\r\n\t\t\tthis._callbacks.push(callback);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Expose to global scope (for browser usage via IIFE)\r\nwindow.FrameRateHelper = FrameRateHelper;"],"names":[],"mappings":"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"}